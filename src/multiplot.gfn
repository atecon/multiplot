<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="multiplot" no-data-ok="true" minver="2020b">
<author email="atecon@posteo.de">Sven Schreiber and Artur Tarassow</author>
<version>0.2</version>
<date>2020-08-13</date>
<description>Combine multiple plots to a single graph</description>
<tags>C88</tags>
<help>
This package compiles a multiplot graph comprising multiple sub plots.

Please ask questions and report bugs on the gretl mailing list if possible. Alternatively, create an issue ticket on the github repo (see below).
Source code and test script(s) can be found here:
https://github.com/atecon/multiplot

**Note**: For Windows and MAC users we recommend to use the latest snapshot containing gnuplot version 5.2.6 due to some issues with gnuplot 5.2.4 which is shipped with gretl 2020b. Download here for:
- Windows here: http://gretl.sourceforge.net/win32/
- macOS: http://gretl.sourceforge.net/osx.html


PUBLIC FUNCTION:
-----------------------------------------------------------------------
Function:       multiplot(const strings files_input, const string file_output,
                int n_rows, int n_cols, bundle options)
Arguments:
files_input:    strings, Array of filenames each referring to a gnuplot file
file_output:    string, Full output file path for storing compiled plot
                (optional, default '0')
n_rows:         int, Number of rows of the multiplot grid; if zero determined
                (optional) by the number of columns chosen.
n_cols:         int, Number of columns of the multiplot grid (optional,
                default '0'); if zero determined by the number of rows chosen.
options:        bundle, Parameters for fine-tuning the plot (optional,
                see below for default values)

Return:
String variable including the gnuplot command. Plots are stored if 'file_output' is specified.
-----------------------------------------------------------------------


Optional parameters
---------------------------
The user can pass an optional bundle ('options') as the fifth argument for fine-tuning the multiplot. The following parameters are currently supported and their default values are:

PLOT_WIDTH: default: 800 (pixels)
PLOT_HEIGHT: 600 (pixels)
FONT_SIZE = 12



Changelog:
- v0.2, August 2020:
	+ Bug fix: &quot;display&quot; mode did not work as no terminal was set in this case
	+ Bug fix: Missing argument for sprintf() function call in case no
      supported terminal was passed.
- v0.11, June 2020:
	+ Add note to use gnuplot 5.2.6 (available in latest snapshot) due to some bug on Windows systems.
- v0.1, June 2020:
	+ initial release
</help>
<depends count="1">
extra </depends>
<gretl-function name="multiplot" type="string">
 <params count="5">
  <param name="files_input" type="strings" const="true">
<description>Input file paths/names</description>
  </param>
  <param name="file_output" type="string" optional="true">
<description>Full output file path/name</description>
  </param>
  <param name="n_rows" type="int" min="0" default="0">
<description>Number of rows in plot grid</description>
  </param>
  <param name="n_cols" type="int" min="0" default="0">
<description>Number of cols in plot grid</description>
  </param>
  <param name="options" type="bundle" optional="true"/>
 </params>
<code>/* Main public function.
return: String containing the gnuplot plot code. */
check_os_and_gretl_version()
check_version_of_extra_package()
strings codes = get_file_contents(files_input)
# Initializations
if file_output == &quot;display&quot;
  string file_type = &quot;png&quot;
elif !exists(file_output) || (exists(file_output) &amp;&amp; !strlen(file_output))
  string file_output = &quot;display&quot;
  string file_type = &quot;png&quot;
else
  string file_type = splitfname(file_output)[3]
endif
if exists(options)
  bundle options = options + get_default_parameters()
else
  bundle options = get_default_parameters()
endif
string terminal = set_terminal(file_type)
set_grid_dimension(&amp;n_rows, &amp;n_cols, nelem(codes))
string file_tmp = compile_and_write_joint_code(terminal, codes, n_rows, n_cols, options)
gnuplot --input=&quot;@file_tmp&quot; --output=&quot;@file_output&quot;
return readfile(file_tmp)
</code>
</gretl-function>
<gretl-function name="check_os_and_gretl_version" type="void" private="1">
<code>/* Check for installed OS and gretl version. */
if ($sysinfo.os == &quot;windows&quot; || $sysinfo.os == &quot;osx&quot;) &amp;&amp; $version &lt; 20202
  funcerr(sprintf(&quot;Due to some issue with gnuplot version 5.2.4 on your\n             system you should install the current snapshot.&quot;))
endif
</code>
</gretl-function>
<gretl-function name="check_version_of_extra_package" type="void" private="1">
<code>/* Need the splitfname() function from the 'extra' package. */
pkg query extra --quiet
if $result.version &lt; 0.6
  catch pkg install extra
  errorif($error &gt; 0, &quot;Failed to install the 'extra' package of minimum version 0.6&quot;)
endif
</code>
</gretl-function>
<gretl-function name="set_grid_dimension" type="void" private="1">
 <params count="3">
  <param name="n_rows" type="scalarref"/>
  <param name="n_cols" type="scalarref"/>
  <param name="N" type="int" const="true"/>
 </params>
<code>/* Set number of rows and columns for grid. */
if n_rows * n_cols &gt; 0
  if N &gt; (n_rows * n_cols)	# fully manual spec
    funcerr(sprintf(&quot;The specified grid (%d by %d) is insufficient for the number of\nsub-plots to plot (%d).&quot;, n_rows, n_cols, N))
  elif N &lt; (n_rows * n_cols)
    funcerr(sprintf(&quot;The specified grid (%d by %d) exceeds the number of\nsub-plots to plot (%d).&quot;, n_rows, n_cols, N))
  endif
elif n_rows &amp;&amp; !n_cols
  n_cols = ceil(N / n_rows)
elif !n_rows &amp;&amp; n_cols
  n_rows = ceil(N / n_cols)
elif !n_rows &amp;&amp; !n_cols			# fully automatic specification
  n_rows = ceil(sqrt(N))
  n_cols = ceil(N / n_rows)
endif
</code>
</gretl-function>
<gretl-function name="get_default_parameters" type="bundle" private="1">
<code>/* Set default plotting parameters here. */
return defbundle( &quot;PLOT_WIDTH&quot;, 800, &quot;PLOT_HEIGHT&quot;, 600, &quot;FONT_SIZE&quot;, 12)
</code>
</gretl-function>
<gretl-function name="write_terminal_and_mplot_dims" type="void" private="1">
 <params count="4">
  <param name="terminal" type="string" const="true"/>
  <param name="n_rows" type="int" const="true"/>
  <param name="n_cols" type="int" const="true"/>
  <param name="options" type="bundle" const="true"/>
 </params>
<code>/* Set canvas and multiplot dimensions for grid. */
set_canvas(terminal, options)
printf &quot;set multiplot layout %d,%d rowsfirst\n&quot;, n_rows, n_cols
</code>
</gretl-function>
<gretl-function name="set_canvas" type="void" private="1">
 <params count="2">
  <param name="terminal" type="string" const="true"/>
  <param name="options" type="bundle" const="true"/>
 </params>
<code>/* Actual writing of the terminal command: Set size of canvas and font size.*/
scalar factor = 1
factor = (terminal == &quot;pdfcairo&quot; || terminal == &quot;epscairo&quot;) ? 100 : factor
printf &quot;set term %s font ',%d' size %d,%d\n&quot;, terminal, options.FONT_SIZE, options.PLOT_WIDTH / factor, options.PLOT_HEIGHT / factor
</code>
</gretl-function>
<gretl-function name="compile_and_write_joint_code" type="string" private="1">
 <params count="5">
  <param name="terminal" type="string" const="true"/>
  <param name="codes" type="strings" const="true"/>
  <param name="n_rows" type="int" const="true"/>
  <param name="n_cols" type="int" const="true"/>
  <param name="options" type="bundle" const="true"/>
 </params>
<code>/* Write gnuplot script codes to temporary files.
return: string, multiplot script */
string file_tmp
outfile --tempfile=file_tmp
  write_terminal_and_mplot_dims(terminal, n_rows, n_cols, options)
  print_codes(codes)
  print &quot;unset multiplot&quot;
end outfile
return file_tmp
</code>
</gretl-function>
<gretl-function name="get_file_contents" type="strings" private="1">
 <params count="1">
  <param name="files_input" type="strings" const="true"/>
 </params>
<code>/* Retrieve content of input gnuplot files. We also check whether files actually exist.
return: strings, Array including code. */
strings codes = array(0)
loop i=1..nelem(files_input) --quiet
  catch string content = readfile(files_input[i])
  errorif($error, sprintf(&quot;\nError: file '%s' does not exist.\n&quot;, files_input[i]))
  codes += content
endloop
return codes
</code>
</gretl-function>
<gretl-function name="print_codes" type="void" private="1">
 <params count="1">
  <param name="codes" type="strings" const="true"/>
 </params>
<code>/* Write code of separate plots, and write content to common gnuplot file. */
loop i=1..nelem(codes) --quiet
  printf &quot;%s\n&quot;, codes[i]
  printf &quot;reset\n&quot;  # reset to default values after each plot
endloop
</code>
</gretl-function>
<gretl-function name="set_terminal" type="string" private="1">
 <params count="1">
  <param name="file_type" type="string" const="true"/>
 </params>
<code>/* Determine the gnuplot terminal identifier name. */
bundle TYPES = defbundle( &quot;png&quot;, &quot;png&quot;, &quot;pdf&quot;, &quot;pdfcairo&quot;, &quot;eps&quot;, &quot;epscairo&quot;, &quot;svg&quot;, &quot;svg&quot;)
errorif(!inbundle(TYPES, file_type), sprintf(&quot;Error: Requested terminal '%s' is not supported.\n&quot;, file_type))
return TYPES[&quot;@file_type&quot;]
</code>
</gretl-function>
<sample-script>
clear
set verbose off
open denmark -q

include multiplot.gfn

# Select an example case
scalar CASE = 1
# Fine tune the graph if wished
bundle options = defbundle(&quot;FONT_SIZE&quot;, 10, &quot;PLOT_HEIGHT&quot;, 700)


if CASE == 1
    setopt gnuplot persist --time-series --with-lines
    gnuplot LRM --output=tf1.gp { set title &quot;foo&quot; ; set yrange[10:12]; \
      set ylabel &quot;ylabel&quot;; set linetype 1 lw 2 pt 6 lc rgb &quot;blue&quot; ; }
    gnuplot LRY --output=tf2.gp { set title &quot;foo&quot; ; set xlabel &quot;xlabel&quot;; }
    gnuplot IBO --output=tf3.gp { set title &quot;foo&quot; ; set grid ; }
    gnuplot IDE --output=tf4.gp
elif CASE == 2
    qqplot LRM --output=tf1.gp
    qqplot LRY --output=tf2.gp
    qqplot IBO --output=tf3.gp
    qqplot IDE --output=tf4.gp
elif CASE == 3
    qqplot LRM --output=tf1.gp
    qqplot LRY --output=tf2.gp
    gnuplot IBO --output=tf3.gp --time-series --with-lines { set title &quot;foo&quot; ; set grid ; }
    gnuplot IDE --output=tf4.gp --time-series --with-lines
elif CASE == 4						# qqplot FAILS
    gnuplot IBO --output=tf1.gp --time-series --with-lines { set title &quot;foo&quot; ; set yrange[-10:10]; \
      set ylabel &quot;ylabel&quot;; }
    gnuplot IDE --output=tf2.gp --time-series --with-lines { set title &quot;foo&quot; ; set xlabel &quot;xlabel&quot;; }
    qqplot IBO --output=tf3.gp
    freq IDE --plot=tf4.gp
endif

# Automatic grid determination + pdf output
string Gin = multiplot(defarray(&quot;tf1.gp&quot;,&quot;tf2.gp&quot;,&quot;tf3.gp&quot;,&quot;tf4.gp&quot;),\
  &quot;my.pdf&quot;, , , options)
# print Gin               # uncomment for printing gnuplot command

# Multiplot with 1 row + svg output
string Gin = multiplot(defarray(&quot;tf1.gp&quot;,&quot;tf2.gp&quot;,&quot;tf3.gp&quot;,&quot;tf4.gp&quot;),\
  &quot;my.svg&quot;, 1, , options)

# Multiplot with 4 rows + png output
string Gin = multiplot(defarray(&quot;tf1.gp&quot;,&quot;tf2.gp&quot;,&quot;tf3.gp&quot;,&quot;tf4.gp&quot;),\
  &quot;foo.png&quot;, 4, , options)

# Automatic grid determination + eps output
Gin = multiplot(defarray(&quot;tf1.gp&quot;,&quot;tf2.gp&quot;,&quot;tf3.gp&quot;,&quot;tf4.gp&quot;),\
  &quot;my.eps&quot;, , , options)
</sample-script>
</gretl-function-package>
</gretl-functions>
