<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="multiplot" no-data-ok="true" minver="2021a">
<author email="atecon@posteo.de">Sven Schreiber and Artur Tarassow</author>
<version>0.3</version>
<date>2023-01-20</date>
<description>Combine multiple plots to a single graph</description>
<tags>C88</tags>
<help>
This package compiles a multiplot graph comprising multiple subplots. The
subplots can be produced with various plotting commands in gretl, which are
all based on the gnuplot program. 

Please ask questions and report bugs on the gretl mailing list if possible.
Alternatively, create an issue ticket on the github repo. Source code and test
scripts can also be found there: https://github.com/atecon/multiplot


PUBLIC FUNCTION:
------------------------------------------------------------------------------
Function:       multiplot(const strings input_data, const string file_output,
                int n_rows, int n_cols, bundle options)
Arguments:
input_data:     strings - Array of filenames each referring to a gnuplot file;
                or alternatively array of gnuplot command text strings
file_output:    string - Full output file path for storing compiled plot
                (optional, default null implies &quot;display&quot;)
n_rows:         int - Number of rows of the multiplot grid (optional; if 0 or
                omitted, it is determined by the number of columns chosen)
n_cols:         int - Number of columns of the multiplot grid (optional; if 0
                or omitted, it is determined by the number of rows chosen)
options:        bundle - Parameters for fine-tuning the plot (optional,
                see below for default values)

Return value:
String variable containing the gnuplot commands. Plots are stored to disc if
'file_output' is specified.
------------------------------------------------------------------------------


Optional parameters
-----------------------------
The user can pass an optional bundle ('options') as the fifth argument; mainly
for fine-tuning the multiplot. The following parameters are currently supported
and their default values are:

PLOT_WIDTH:         Width of the plot. Default: 800 (pixels)
PLOT_HEIGHT:        Height of the plot. Default: 600 (pixels)
FONT_SIZE:          Font size. Default: 12 pt
only_input_files:   Boolean switch which should be set to TRUE if argument
                    input_data only contains filenames and no gnuplot command
                    strings, otherwise FALSE. Default: TRUE
-----------------------------


Changelog:
- v0.3, January 2023: 
    + Accept the direct input of gnuplot command file contents in the strings
      array instead of the names of temporary files.
    + Require gretl 2021a because of modern internal bundle syntax.
    + Various small other edits
- v0.2, August 2020:
    + Bug fix: &quot;display&quot; mode did not work as no terminal was set in this case.
    + Bug fix: Missing argument for sprintf() function call in case no
      supported terminal was passed.
    + Switch from &quot;png&quot; to &quot;pngcairo&quot; terminal.
- v0.11, June 2020:
    + Add note to use gnuplot 5.2.6 (available in latest snapshot) due to some
      bug on Windows systems.
- v0.1, June 2020:
    + initial release
</help>
<depends count="1">
extra </depends>
<gretl-function name="multiplot" type="string">
 <params count="5">
  <param name="input_data" type="strings" const="true">
<description>Filennames or gnuplot commands</description>
  </param>
  <param name="file_output" type="string" optional="true">
<description>Filename of compiled plot (optional)</description>
  </param>
  <param name="n_rows" type="int" min="0" default="0">
<description>Number of rows in plot grid</description>
  </param>
  <param name="n_cols" type="int" min="0" default="0">
<description>Number of cols in plot grid</description>
  </param>
  <param name="options" type="bundle" optional="true"/>
 </params>
<code>/* Main public function.
input_data: Input file paths/names or directly gnuplot commands
file_output: Full output file path/name
return: String containing the gnuplot plot code. */
check_version_of_extra_package()
if exists(options)
  options = options + get_default_parameters()
else
  bundle options = get_default_parameters()
endif
scalar only_input_files = includes_only_filenames(input_data, options)
strings codes = only_input_files == TRUE ? get_file_contents(input_data) : input_data
string file_output = !exists(file_output) ? &quot;display&quot; : file_output
string file_type = get_filetype_output(file_output)
string terminal = set_terminal(file_type)
set_grid_dimension(&amp;n_rows, &amp;n_cols, nelem(codes))
# FIXME: this still writes the resulting gnuplot code into a temp file,
# even when we're not using temp files for input. Is that OK?
# If not, then we need to use outfile --buffer=... in
# compile_and_write_joint_code, but we're facing the problem that the
# 'gnuplot' cmd doesn't accept an input buffer string, AFAIK.
# Or is it actually possible to use the literal mechanism in
# gretl for that? Like:
# gnuplot --output=&quot;@file_output&quot; { @myinputbuffer }
# (Perhaps replacing linebreaks inside myinputbuffer with semicolons?)
string file_tmp = compile_and_write_joint_code(terminal, codes, n_rows, n_cols, options)
gnuplot --input=&quot;@file_tmp&quot; --output=&quot;@file_output&quot;
return readfile(file_tmp)
</code>
</gretl-function>
<gretl-function name="check_version_of_extra_package" type="void" private="1">
<code>/* Need the splitfname() function from the 'extra' package. */
pkg query extra --quiet
if $result.version &lt; 0.6
  printf &quot;\nInfo: At least version 0.6 of the 'extra' package must be installed.\n&quot;
  print &quot;Start downloading the latest 'extra' package.&quot;
  catch pkg install extra
  string failmsg = sprintf(&quot;Failed to download/install the latest 'extra' package.\n&quot; ~ &quot;Try by yourself again: &lt;pkg install extra&gt;.&quot;)
  errorif($error &gt; 0, failmsg)
endif
</code>
</gretl-function>
<gretl-function name="set_grid_dimension" type="void" private="1">
 <params count="3">
  <param name="n_rows" type="scalarref"/>
  <param name="n_cols" type="scalarref"/>
  <param name="N" type="int" const="true"/>
 </params>
<code>/* Set number of rows and columns for grid. */
if n_rows * n_cols &gt; 0
  if N &gt; (n_rows * n_cols)	# fully manual spec
    funcerr sprintf(&quot;Specified grid (%d by %d) insufficient for the number of\n&quot; ~ &quot;sub-plots to plot (%d).&quot;, n_rows, n_cols, N)
  elif N &lt; (n_rows * n_cols)
    funcerr sprintf(&quot;Specified grid (%d by %d) exceeds number of\n&quot; ~ &quot;sub-plots to plot (%d).&quot;, n_rows, n_cols, N)
  endif
elif n_rows &amp;&amp; !n_cols
  n_cols = ceil(N / n_rows)
elif !n_rows &amp;&amp; n_cols
  n_rows = ceil(N / n_cols)
elif !n_rows &amp;&amp; !n_cols			# fully automatic specification
  n_rows = ceil(sqrt(N))
  n_cols = ceil(N / n_rows)
endif
</code>
</gretl-function>
<gretl-function name="get_default_parameters" type="bundle" private="1">
<code>/* Set default plotting parameters here. */
return defbundle( &quot;PLOT_WIDTH&quot;, 800, &quot;PLOT_HEIGHT&quot;, 600, &quot;FONT_SIZE&quot;, 12, &quot;file_output&quot;, &quot;&quot;)
</code>
</gretl-function>
<gretl-function name="write_terminal_and_mplot_dims" type="void" private="1">
 <params count="4">
  <param name="terminal" type="string" const="true"/>
  <param name="n_rows" type="int" const="true"/>
  <param name="n_cols" type="int" const="true"/>
  <param name="options" type="bundle" const="true"/>
 </params>
<code>/* Set canvas and multiplot dimensions for grid. */
set_canvas(terminal, options)
printf &quot;set multiplot layout %d,%d rowsfirst\n&quot;, n_rows, n_cols
</code>
</gretl-function>
<gretl-function name="set_canvas" type="void" private="1">
 <params count="2">
  <param name="terminal" type="string" const="true"/>
  <param name="options" type="bundle" const="true"/>
 </params>
<code>/* Actual writing of the terminal command: Set size of canvas and font size.*/
scalar factor = 1
factor = (terminal == &quot;pdfcairo&quot; || terminal == &quot;epscairo&quot;) ? 100 : factor
printf &quot;set term %s font ',%d' size %d,%d\n&quot;, terminal, options.FONT_SIZE, options.PLOT_WIDTH / factor, options.PLOT_HEIGHT / factor
</code>
</gretl-function>
<gretl-function name="compile_and_write_joint_code" type="string" private="1">
 <params count="5">
  <param name="terminal" type="string" const="true"/>
  <param name="codes" type="strings" const="true"/>
  <param name="n_rows" type="int" const="true"/>
  <param name="n_cols" type="int" const="true"/>
  <param name="options" type="bundle" const="true"/>
 </params>
<code>/* Write gnuplot script codes to temporary files.
return: string, multiplot script */
string file_tmp
outfile --tempfile=file_tmp
  write_terminal_and_mplot_dims(terminal, n_rows, n_cols, options)
  print_codes(codes)
  print &quot;unset multiplot&quot;
end outfile
return file_tmp
</code>
</gretl-function>
<gretl-function name="get_file_contents" type="strings" private="1">
 <params count="1">
  <param name="input_data" type="strings" const="true"/>
 </params>
<code>/* Retrieve content of input gnuplot files. We also check whether files
actually exist.
return: strings, Array including code. */
strings codes = array(0)
loop i = 1..nelem(input_data)
  catch string content = readfile(input_data[i])
  errorif($error, sprintf(&quot;\nError: file '%s' does not exist.\n&quot;, input_data[i]))
  codes += content
endloop
return codes
</code>
</gretl-function>
<gretl-function name="print_codes" type="void" private="1">
 <params count="1">
  <param name="codes" type="strings" const="true"/>
 </params>
<code>/* Write code of separate plots, and write content to common gnuplot file. */
loop i = 1..nelem(codes)
  printf &quot;%s\n&quot;, codes[i]
  printf &quot;reset\n&quot;  # reset to default values after each plot
endloop
</code>
</gretl-function>
<gretl-function name="set_terminal" type="string" private="1">
 <params count="1">
  <param name="file_type" type="string" const="true"/>
 </params>
<code>/* Determine the gnuplot terminal identifier name. */
bundle TYPES = defbundle( &quot;png&quot;, &quot;pngcairo&quot;, &quot;pdf&quot;, &quot;pdfcairo&quot;, &quot;eps&quot;, &quot;epscairo&quot;, &quot;svg&quot;, &quot;svg&quot;)
errorif(!inbundle(TYPES, file_type), sprintf(&quot;Error: Requested terminal '%s' is not supported.&quot;, file_type))
return TYPES[file_type]
</code>
</gretl-function>
<gretl-function name="includes_only_filenames" type="scalar" private="1">
 <params count="2">
  <param name="input_data" type="strings" const="true"/>
  <param name="options" type="bundle" const="true"/>
 </params>
<code>/* Determine whether input_data contains just the file names / paths,
or already the actual gnuplot command contents. Our heuristic is to
check for line breaks in the strings, as those should not occur in
file names.
Alternatively, the user can force interpretation with the new flag
'only_input_files=TRUE' in the options bundle.
return: type, description */
if inbundle(options, &quot;only_input_files&quot;)
  return options.only_input_files
else
  scalar n = nlines(flatten(input_data, TRUE))
  return n == 0 ? TRUE : FALSE
endif
</code>
</gretl-function>
<gretl-function name="get_filetype_output" type="string" private="1">
 <params count="1">
  <param name="filename" type="string" const="true"/>
 </params>
<code>/* Return the datatype of file. */
if nelem(filename) == 0 || filename == &quot;display&quot;
  return &quot;png&quot;
else
  return splitfname(filename)[3]
endif
</code>
</gretl-function>
<sample-script>
clear
set verbose off
open denmark -q

include multiplot.gfn

# Select an example case
CASE = 1

# Fine tune the graph if wished
bundle options = _(FONT_SIZE=10, PLOT_HEIGHT=700)


if CASE == 1
    setopt gnuplot persist --time-series --with-lines
    gnuplot LRM --output=tf1.gp { set title &quot;foo&quot; ; set yrange[10:12]; \
      set ylabel &quot;ylabel&quot;; set linetype 1 lw 2 pt 6 lc rgb &quot;blue&quot; ; }
    gnuplot LRY --output=tf2.gp { set title &quot;foo&quot; ; set xlabel &quot;xlabel&quot;; }
    gnuplot IBO --output=tf3.gp { set title &quot;foo&quot; ; set grid ; }
    gnuplot IDE --output=tf4.gp
elif CASE == 2
    qqplot LRM --output=tf1.gp
    qqplot LRY --output=tf2.gp
    qqplot IBO --output=tf3.gp
    qqplot IDE --output=tf4.gp
elif CASE == 3
    qqplot LRM --output=tf1.gp
    qqplot LRY --output=tf2.gp
    gnuplot IBO --output=tf3.gp --time-series --with-lines \
      { set title &quot;foo&quot; ; set grid ; }
    gnuplot IDE --output=tf4.gp --time-series --with-lines
elif CASE == 4						# qqplot FAILS
    gnuplot IBO --output=tf1.gp --time-series --with-lines \
      { set title &quot;foo&quot; ; set yrange[-10:10];  set ylabel &quot;ylabel&quot;; }
    gnuplot IDE --output=tf2.gp --time-series --with-lines \
      { set title &quot;foo&quot; ; set xlabel &quot;xlabel&quot;; }
    qqplot IBO --output=tf3.gp
    freq IDE --plot=tf4.gp
elif CASE == 5
    var 2 LRM LRY --silent
    matrix irf_11 = irf(1, 1, 0.1)
    matrix irf_12 = irf(1, 2, 0.1)
    gnuplot 1 2 3 --matrix=irf_11 --time-series --with-lines --output=irf_11.gp
    gnuplot 1 2 3 --matrix=irf_12 --time-series --with-lines --single-yaxis --output=irf_12.gp
    strings filenames = defarray(&quot;irf_11.gp&quot;,&quot;irf_12.gp&quot;)
    multiplot(filenames, &quot;display&quot;)
endif


# Collect all filenames into an array
strings filenames = defarray(&quot;tf1.gp&quot;,&quot;tf2.gp&quot;,&quot;tf3.gp&quot;,&quot;tf4.gp&quot;)

# Automatic grid determination + instant output on screen
string Gin = multiplot(filenames, &quot;display&quot;, , , options)

# Automatic grid determination + pdf output
Gin = multiplot(filenames, &quot;my.pdf&quot;, , , options)
# print Gin               # uncomment for printing gnuplot command

# Multiplot with 1 row + svg output
Gin = multiplot(filenames, &quot;my.svg&quot;, 1, , options)

# Multiplot with 4 rows + png output
Gin = multiplot(filenames, &quot;foo.png&quot;, 4, , options)

# Automatic grid determination + eps output
Gin = multiplot(filenames, &quot;my.eps&quot;, , , options)


# Show the new feature from version 0.3
# which requires gretl functionality from 2023
if $version &gt; 20222
    string a,b,c,d
    qqplot LRM --buffer=a
    qqplot LRY --buffer=b
    qqplot IBO --buffer=c
    qqplot IDE --buffer=d
    multiplot(defarray(a,b,c,d),,,, options)
endif
</sample-script>
</gretl-function-package>
</gretl-functions>
