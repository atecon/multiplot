function void check_version_of_extra_package (void)
    /* Need the splitfname() function from the 'extra' package. */

    pkg query extra --quiet
    if $result.version < 0.6
        catch pkg install extra
        if $error
            funcerr("Failed to install the 'extra' package of minimum version 0.6")
        endif
    endif
end function


function void set_grid_dimension (scalar *n_rows,
                                  scalar *n_cols,
                                  const int N)
    /* Set number of rows and columns for grid. */
    if n_rows && n_cols && N > (n_rows * n_cols)	# fully manual spec
        funcerr(sprintf("The specified grid (%d by %d) is insufficient for the number of\nsub-plots to plot (%d).", n_rows, n_cols, N))
    elif n_rows && !n_cols
        n_cols = ceil(N / n_rows)
    elif !n_rows && n_cols
        n_rows = ceil(N / n_cols)
    elif !n_rows && !n_cols			# fully auto
        n_rows = ceil(sqrt(N))
        n_cols = ceil(N / n_rows)
    else
        funcerr(sprintf("The specified grid (%d by %d) exceeds the number of\nsub-plots to plot (%d).", n_rows, n_cols, N))
    endif
end function


function bundle get_default_parameters (void)
  /* Set default plotting parameters here. */

  bundle P = defbundle\
    (\
    "PLOT_WIDTH", 800,\
    "PLOT_HEIGHT", 600,\
    "POINT_SIZE", 1,\
    "LINE_WIDTH", 1\
    )

  return P
end function


function void write_terminal_and_plot_details (const string terminal,
                                               const int n_rows,
                                               const int n_cols)
    /* Set number of rows and columns for grid. */

    # Setting canvas size: difficult and terminal-dependent!
    # We start from a "normal" aspect ratio of 16:10
    scalar dim_horizontal = 16
    scalar dim_vertical = 10

    if terminal == "pdfcairo"
        set_canvas_pdfcairo(n_rows, n_cols, dim_horizontal, dim_vertical)
    else
        set_canvas_non_pdfcairo(n_rows, n_cols, dim_horizontal, dim_vertical, terminal)
    endif

    printf "set multiplot layout %d,%d rowsfirst\n", n_rows, n_cols
end function




function void set_canvas_pdfcairo (const int n_rows,
                                   const int n_cols,
                                   const int dim_horizontal,
                                   const int dim_vertical)
    /* */

    scalar factor = 1
    printf "set term pdfcairo font ',%d' size %d,%d\n",\
      (32 * factor), (dim_horizontal * factor * n_cols), (dim_vertical * factor * n_rows)
    printf "set pointsize %d\n", 2 * factor
    printf "set linetype 1 linewidth %d\n", 6 * factor
    printf "set linetype 2 linewidth %d\n", 6 * factor
end function


function void set_canvas_non_pdfcairo (const int n_rows,
                                       const int n_cols,
                                       const int dim_horizontal,
                                       const int dim_vertical,
                                       const string terminal)
    /* */

    scalar factor = 25
    printf "set term %s size %d,%d\n", terminal,\
      (dim_horizontal * factor * n_cols), (dim_vertical * factor * n_rows)
end function


function string compile_and_write_joint_code (const string terminal,
                                const strings files_input,
                                const int n_rows,
                                const int n_cols,
                                const bundle options)
    /* Open temporary file, write gnuplot stuff and clode file. */

    string file_tmp
    outfile --tempfile=file_tmp
        write_terminal_and_plot_details(terminal, n_rows, n_cols, options)
        read_input_files_write_to_tmp(files_input)

        print "unset multiplot"
    end outfile

    return file_tmp
end function


function void read_input_files_write_to_tmp (const strings files_input)
/* Read in gp-files of separate plots, and write content
    to common gnuplot file. */

    scalar N = nelem(files_input)
    string error_string = ""

    loop i = 1..N --quiet
        string file_content = readfile(files_input[i])

        errnum = $error
        if errnum
            error_string = error_string ~ \
              sprintf("Warning: Error reading file %d, ignoring.\n", i)
            # error_string = error_string ~ files_input[i] ~ errmsg(errnum)
        else
            printf "%s\n", file_content
            if $i < N
                printf "reset\n"  # reset to daulf values after each plot
            endif
        endif
    endloop

    print error_string
end function


function string set_terminal (const string file_type)
    /* Set the gnuplot terminal. */

    if file_type == "png"
        string terminal = "png"
    elif file_type == "pdf"
        string terminal = "pdfcairo"
    elif file_type == "eps"
        string terminal = "postscript eps"
    elif file_type == "svg"
        string terminal = "svg"
    endif

    return terminal
end function


function string multiplot (const strings files_input "Input file paths/names",
                           const string file_output[null] "Full output file path/name",
                           int n_rows[0::0] "Number of rows in plot grid",
                           int n_cols[0::0] "Number of cols in plot grid",
                           bundle options[null])

    /*
       files_input: paths to gnuplot code files
       (if just a file name is given then it must be in the
       current workdir)

       file_output: optional, where to write the compiled output plot; can be pdf, eps, etc., or "display" (see gnuplot doc)

       Default values 0 for both r and c means to try a square grid.       Leaving just one of r or c at default means to auto-adjust to the other input. (For example, to get side-by-side do r=1 and c=0.)

       The output string contains the gnuplot plot code.
    */

    check_version_of_extra_package()

    # Initializations
    if !exists(file_output) || (exists(file_output) && !strlen(file_output))
      string file_output = "display"
      string file_type = "png"
    else
      string file_type = splitfname(file_output)[3]				# FIXME: dependency to 'extra' v0.6
    endif
    if exists(options)
      bundle options = options + get_default_parameters()
    else
      bundle options = get_default_parameters()
    endif

    string terminal = set_terminal(file_type)
    set_grid_dimension(&n_rows, &n_cols, nelem(files_input))
    string file_tmp = compile_and_write_joint_code(terminal, files_input, n_rows, n_cols, options)

    gnuplot --input="@file_tmp" --output="@file_output"

    return readfile(file_tmp)
end function





