function void check_version_of_extra_package (void)
    /* Need the splitfname() function from the 'extra' package. */

    pkg query extra --quiet
    if $result.version < 0.6
        printf "\nInfo: At least version 0.6 of the 'extra' package must be installed.\n"
        print "Start downloading the latest 'extra' package."
        catch pkg install extra
        
        string failmsg = sprintf("Failed to download/install the latest 'extra' package.\n" ~ \
          "Try by yourself again: <pkg install extra>.")
        errorif($error > 0, failmsg)
    endif
    
end function


function void set_grid_dimension (scalar *n_rows,
                                  scalar *n_cols,
                                  const int N)
    /* Set number of rows and columns for grid. */

    if n_rows * n_cols > 0
        if N > (n_rows * n_cols)	# fully manual spec
            funcerr sprintf("Specified grid (%d by %d) insufficient for the number of\n" ~ \
              "sub-plots to plot (%d).", n_rows, n_cols, N)
        elif N < (n_rows * n_cols)
            funcerr sprintf("Specified grid (%d by %d) exceeds number of\n" ~ \
              "sub-plots to plot (%d).", n_rows, n_cols, N)
        endif
    elif n_rows && !n_cols
        n_cols = ceil(N / n_rows)
    elif !n_rows && n_cols
        n_rows = ceil(N / n_cols)
    elif !n_rows && !n_cols			# fully automatic specification
        n_rows = ceil(sqrt(N))
        n_cols = ceil(N / n_rows)
    endif
end function


function bundle get_default_parameters (void)
    /* Set default plotting parameters here. */

    return defbundle(
                     "PLOT_WIDTH", 800,
                     "PLOT_HEIGHT", 600,
                     "FONT_SIZE", 10,
                     "file_output", "")
end function


function bundle check_parameter_values (bundle *self)
    /* Check some of the passed parameter values for validity. */


    bundle Btmp =  get_default_parameters()
    strings keys = getkeys(Btmp)

    loop foreach i keys
        if self["$i"] < 0
            self["$i"] = Btmp["i"]
            printf "\nWARNING: Parameter '%s' is negative. Set to %d.",\
                "$i", Btmp["i"]
        endif
    endloop
end function


function void write_terminal_and_mplot_dims (const string terminal,
                                             const int n_rows,
                                             const int n_cols,
                                             const bundle options)
    /* Set canvas and multiplot dimensions for grid. */

    set_canvas(terminal, options)
    printf "set multiplot layout %d,%d rowsfirst\n", n_rows, n_cols
end function


function void set_canvas (const string terminal,
                          const bundle options)
    /* Actual writing of the terminal command: Set size of canvas and font size.*/

    scalar factor = 1
    factor = (terminal == "pdfcairo" || terminal == "epscairo") ? 100 : factor

    printf "set term %s font ',%d' size %d,%d\n", terminal, options.FONT_SIZE, \
      options.PLOT_WIDTH / factor, options.PLOT_HEIGHT / factor
end function


function string compile_and_write_joint_code (const string terminal,
                                              const strings codes,
                                              const int n_rows,
                                              const int n_cols,
                                              const bundle options)
    /* Write gnuplot script codes to temporary files.
    return: string, multiplot script */

    string file_tmp
    outfile --tempfile=file_tmp
        write_terminal_and_mplot_dims(terminal, n_rows, n_cols, options)
        print_codes(codes)
        print "unset multiplot"
    end outfile

    return file_tmp
end function


function strings get_file_contents (const strings input_data)
    /* Retrieve content of input gnuplot files. We also check whether files 
    actually exist.
    return: strings, Array including code. */

    strings codes = array(0)

    loop i = 1..nelem(input_data)
        catch string content = readfile(input_data[i])
        errorif($error, sprintf("\nError: file '%s' does not exist.\n", \
          input_data[i]))
        codes += content
    endloop

    return codes
end function

function void print_codes (const strings codes)
    /* Write code of separate plots, and write content to common gnuplot file. */

    loop i = 1..nelem(codes) 
        printf "%s\n", codes[i]
        printf "reset\n"  # reset to default values after each plot
    endloop
end function


function string set_terminal (const string file_type)
    /* Determine the gnuplot terminal identifier name. */

    bundle TYPES = defbundle(\
                    "png", "pngcairo",\
                    "pdf", "pdfcairo",\
                    "eps", "epscairo",\
                    "svg", "svg")

    errorif(!inbundle(TYPES, file_type), \
      sprintf("Error: Requested terminal '%s' is not supported.", file_type))

    return TYPES[file_type]
end function


function scalar includes_only_filenames (const strings input_data,
                                         const bundle options)
    /* Determine whether input_data contains just the file names / paths,
        or already the actual gnuplot command contents. Our heuristic is to
        check for line breaks in the strings, as those should not occur in
        file names.
        Alternatively, the user can force interpretation with the new flag
        'only_input_files=TRUE' in the options bundle.
        return: type, description */

    if inbundle(options, "only_input_files")
        return options.only_input_files
    else
        scalar n = nlines(flatten(input_data, TRUE))
        return n == 0 ? TRUE : FALSE
    endif
end function


function string get_filetype_output (const string filename)
    /* Return the datatype of file. */

    if nelem(filename) == 0 || filename == "display"
        return "png"
    else
        return splitfname(filename)[3]
    endif
end function


function string multiplot (const strings input_data "Filenames or gnuplot commands",
                           string file_output[null] "Filename of compiled plot (optional)",
                           int n_rows[0::0] "Number of rows in plot grid",
                           int n_cols[0::0] "Number of cols in plot grid",
                           bundle options[null])
    /* Main public function.
    input_data: Input file paths/names or directly gnuplot commands
    file_output: Full output file path/name
    return: String containing the gnuplot plot code. */

    check_version_of_extra_package()
    
    if exists(options)
        options = options + get_default_parameters()
    else
        bundle options = get_default_parameters()
    endif

    scalar only_input_files = includes_only_filenames(input_data, options)
    strings codes = only_input_files == TRUE ? get_file_contents(input_data) \
                    : input_data
    string file_output = !exists(file_output) ? "display" : file_output
    string file_type = get_filetype_output(file_output)
    string terminal = set_terminal(file_type)
    set_grid_dimension(&n_rows, &n_cols, nelem(codes))

    # FIXME: this still writes the resulting gnuplot code into a temp file,
    # even when we're not using temp files for input. Is that OK?
    # If not, then we need to use outfile --buffer=... in 
    # compile_and_write_joint_code, but we're facing the problem that the 
    # 'gnuplot' cmd doesn't accept an input buffer string, AFAIK. 
    # Or is it actually possible to use the literal mechanism in 
    # gretl for that? Like: 
    # gnuplot --output="@file_output" { @myinputbuffer }
    # (Perhaps replacing linebreaks inside myinputbuffer with semicolons?) 
    
    string file_tmp = compile_and_write_joint_code(terminal, codes,
                                                   n_rows, n_cols, options)
    gnuplot --input="@file_tmp" --output="@file_output"

    return readfile(file_tmp)
end function
