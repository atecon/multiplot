set verbose off
clear
set assert stop

include "./src/multiplot.inp" --force
include assertion.gfn

open denmark -q
bundle options = _(FONT_SIZE=10, PLOT_HEIGHT=700)
qqplot LRM --output=tf1.gp
qqplot LRY --output=tf2.gp
qqplot IBO --output=tf3.gp
qqplot IDE --output=tf4.gp
qqplot LRM --output=tf5.gp
strings filenames = defarray("tf1.gp","tf2.gp","tf3.gp","tf4.gp","tf5.gp")
Gin = multiplot(filenames, "foo.png", 3, 2, options)



function void test_set_grid_dimension (void)
    print "Start testing set_grid_dimension()"

    scalar n_rows = 2
    scalar n_cols = 0
    scalar N = 4
    set_grid_dimension(&n_rows, &n_cols, N)
    assert_equal_num(n_rows, 2)
    assert_equal_num(n_cols, 2)

    scalar n_rows = 0
    scalar n_cols = 0
    scalar N = 4
    set_grid_dimension(&n_rows, &n_cols, N)
    assert_equal_num(n_rows, 2)
    assert_equal_num(n_cols, 2)

    scalar n_rows = 0
    scalar n_cols = 2
    scalar N = 4
    set_grid_dimension(&n_rows, &n_cols, N)
    assert_equal_num(n_rows, 2)
    assert_equal_num(n_cols, 2)

    scalar n_rows = 2
    scalar n_cols = 2
    scalar N = 4
    set_grid_dimension(&n_rows, &n_cols, N)
    assert_equal_num(n_rows, 2)
    assert_equal_num(n_cols, 2)

    scalar n_rows = 2
    scalar n_cols = 1
    scalar N = 4
    catch set_grid_dimension(&n_rows, &n_cols, N)
    assert_equal_num(n_rows, 2)
    assert_equal_num(n_cols, 1)

    scalar n_rows = 1
    scalar n_cols = 2
    scalar N = 4
    catch set_grid_dimension(&n_rows, &n_cols, N)
    assert_equal_num(n_rows, 1)
    assert_equal_num(n_cols, 2)

    scalar n_rows = 2
    scalar n_cols = 2
    scalar N = 3
    catch set_grid_dimension(&n_rows, &n_cols, N)
    assert_equal_num(n_rows, 2)
    assert_equal_num(n_cols, 2)

    scalar n_rows = 3
    scalar n_cols = 2
    scalar N = 5
    set_grid_dimension(&n_rows, &n_cols, N)
    assert_equal_num(n_rows, 3)
    assert_equal_num(n_cols, 2)
end function
test_set_grid_dimension()


function void test_get_default_parameters (void)
    print "Start get_default_parameters()."

    bundle B = get_default_parameters()
    assert(nelem(B) == 4)
    assert(B.PLOT_WIDTH == 800)
    assert(B.PLOT_HEIGHT == 600)
    assert(B.FONT_SIZE == 10)
    assert(B.file_output == "")
end function
test_get_default_parameters()


function void test_set_canvas (void)
    print "Start set_canvas()."

    string terminal = "pdfcairo"
    bundle options = \
        defbundle(\
        "PLOT_WIDTH", 800,\
        "PLOT_HEIGHT", 600,\
        "FONT_SIZE", 11)

    string buffer = ""
    outfile --buffer=buffer
        set_canvas(terminal, options)
    end outfile
    assert_equal_str(strstrip(buffer), "set term pdfcairo font ',11' size 8,6")

    string terminal = "epscairo"
    bundle options = \
        defbundle(\
        "PLOT_WIDTH", 800,\
        "PLOT_HEIGHT", 600,\
        "FONT_SIZE", 11)

    string buffer = ""
    outfile --buffer=buffer
        set_canvas(terminal, options)
    end outfile
    assert_equal_str(strstrip(buffer), "set term epscairo font ',11' size 8,6")

    string terminal = "pngcairo"
    bundle options = \
        defbundle(\
        "PLOT_WIDTH", 800,\
        "PLOT_HEIGHT", 600,\
        "FONT_SIZE", 11)

    string buffer = ""
    outfile --buffer=buffer
        set_canvas(terminal, options)
    end outfile
    assert_equal_str(strstrip(buffer), "set term pngcairo font ',11' size 800,600")

    string terminal = "svg"
    bundle options = \
        defbundle(\
        "PLOT_WIDTH", 800,\
        "PLOT_HEIGHT", 600,\
        "FONT_SIZE", 11)

    string buffer = ""
    outfile --buffer=buffer
        set_canvas(terminal, options)
    end outfile
    assert_equal_str(strstrip(buffer), "set term svg font ',11' size 800,600")
end function
test_set_canvas()

function void test_set_terminal (void)
    print "Start set_terminal()."

    assert_equal_str(set_terminal("png"), "pngcairo")
    assert_equal_str(set_terminal("svg"), "svg")
    assert_equal_str(set_terminal("pdf"), "pdfcairo")
    assert_equal_str(set_terminal("eps"), "epscairo")
end function
test_set_terminal()


function void test_write_terminal (void)
    print "Start write_terminal_and_mplot_dims()."

    string terminal = "png"
    bundle options = \
        defbundle(\
        "PLOT_WIDTH", 800,\
        "PLOT_HEIGHT", 600,\
        "FONT_SIZE", 11)
    scalar n_rows = 2
    scalar n_cols = 2

    string buffer = ""
    outfile --buffer=buffer
        write_terminal_and_mplot_dims(terminal, n_rows, n_cols, options)
    end outfile

    assert_true(instring(buffer, "set term png font ',11' size 800,600"))
    assert_true(instring(buffer, "set multiplot layout 2,2 rowsfirst"))
end function
test_write_terminal()

function void test_get_file_contents (void)
    print "Start testing get_file_contents()."

    outfile "test1.gp"
        print "some gnuplot code"
    end outfile
    outfile "test2.gp"
        print "another gnuplot script"
    end outfile

    strings codes = get_file_contents(defarray("test1.gp", "test2.gp"))

    assert_true(instring(codes[1], "some gnuplot code"))
    assert_true(instring(codes[2], "another gnuplot script"))
end function
test_get_file_contents()


function void test_print_codes (void)
    print "Start testing print_codes()."

    string buffer
    outfile --buffer=buffer
        print_codes(defarray("FIRST PLOT", "SECOND PLOT"))
    end outfile

    assert_true(instring(buffer, "FIRST PLOT"))
    assert_true(instring(buffer, "SECOND PLOT"))
end function
test_print_codes()


function void test_check_version_of_extra_pck (void)
    print "Start testing check_version_of_extra_package() ."

    check_version_of_extra_package()
end function
test_check_version_of_extra_pck()


function void test_compile_and_write_joint_c (void)
    print "Start testing compile_and_write_joint_code()."
    print "PASS"
end function
test_compile_and_write_joint_c()



bundles Params = null
Params = Params + _(input = defarray("foo1.png", "foo2.png"),
                    opts = _(only_input_files = TRUE), expected = TRUE)
Params = Params + _(input = defarray("foo1.png", "foo2.png"),
                    opts = _(only_input_files = FALSE), expected = FALSE)
Params = Params + _(input = defarray("foo1.png", "foo2.png"),
                    opts = _(dummy = 0), expected = TRUE)

string fname = sprintf("some command\\n\ foo\n")
Params = Params + _(input = defarray(fname),
                    opts = _(dummy = 0), expected = FALSE)

function void test_includes_only_filenames (const bundles P)
    print "Start testing function includes_only_filenames()"

    loop foreach i P
        # Given + When
        scalar actual = includes_only_filenames(P[i].input, P[i].opts)

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_includes_only_filenames(Params)


bundles Params = null
Params = Params + _(filename = "display", expected = "png")
Params = Params + _(filename = "", expected = "png")
Params = Params + _(filename = "foo.pdf", expected = "pdf")

function void test_get_filetype_output (const bundles P)
    print "Start testing function get_filetype_output()."

    loop foreach i P
        # Given + When
        string actual = get_filetype_output(P[i].filename)

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_get_filetype_output(Params)



bundles Params = null
Params = Params + _(PLOT_WIDTH = 800, expected = 800)
Params = Params + _(PLOT_WIDTH = -800, expected = 800)
Params = Params + _(PLOT_HEIGHT = 800, expected = 800)
Params = Params + _(PLOT_HEIGHT = -800, expected = 600)
Params = Params + _(FONT_SIZE = 12, expected = 12)
Params = Params + _(FONT_SIZE = -12, expected = 10)

function void test_check_parameter_values (const bundles P)
    print "Start testing function check_parameter_values()."

    loop foreach i P
        # Given
        string keyname = getkeys(P[i])[1]  # only a single key expected
        bundle actual = P[i]

        # When
        check_parameter_values(&actual)

        # Then
        assert(actual[keyname] == P[i].expected)
    endloop
end function
test_check_parameter_values(Params)


printf "\n\nAll tests succesfully passed.\n"
quit
